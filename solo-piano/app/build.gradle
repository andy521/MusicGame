buildscript {
    repositories {
        flatDir { dirs 'libs/plugin' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.6'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

def build_time = new Date().format('yyMMddHHmmss')

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "piano.tiles.pandora.musical.ly.music.keyboard"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"
    }

    signingConfigs {
        release {
            keyAlias 'piano'
            keyPassword '123456'
            storeFile file('../piano.jks')
            storePassword '123456'
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    buildTypes {
        debug{
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "BUILD_NUM", "\"" + build_time + "\""

            minifyEnabled false
            shrinkResources false
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "BUILD_NUM", "\"" + build_time + "\""
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 输出apk名称为boohee_v1.0_2015-01-15_wandoujia.apk  _${variant.productFlavors[0].name}
                def fileName = "Music Piano_v${defaultConfig.versionName}_${build_time}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

repositories {
    flatDir { dirs 'libs/aar' }
    mavenCentral()
}

dependencies {
    compile files('libs/jar/FlurryAnalytics-6.3.0.jar')
    compile 'com.android.support:appcompat-v7:25+'

    compile (name:'crashlytics-2.5.5', ext:'aar')
    compile (name:'fabric-1.3.10', ext:'aar')
    compile (name:'answers-1.3.6', ext:'aar')
    compile (name:'beta-1.1.4', ext:'aar')
    compile (name:'crashlytics-core-2.3.8', ext:'aar')
//    compile 'com.facebook.android:facebook-android-sdk:4.+'
    compile 'com.android.support:recyclerview-v7:25+'

    compile 'com.android.support:support-v4:25+'
    compile(name: 'AudienceNetwork', ext: 'aar')
    compile(name: 'DebugSettings', ext: 'aar')

    compile 'com.facebook.android:facebook-android-sdk:[4,5)'
}

//assembleRelease.doLast{
//    copy{
//        def desPath = "backup/piano_map_" + build_time
//        from 'build/outputs/mapping/release'
//        into desPath
//    }
//}


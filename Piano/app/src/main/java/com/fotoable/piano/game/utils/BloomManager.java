package com.fotoable.piano.game.utils;

import android.opengl.GLES20;
import android.opengl.Matrix;

import com.fotoable.piano.game.GameRender;
import com.fotoable.piano.game.bloom.FBORenderer;

import java.nio.FloatBuffer;


/***
 * Render To Texture (RTT)
 * ***********************
 * 1) Create FBO
 * 2) Generate POT Texture
 * 3) Render scene to FBO
 * 4) Render final scene with texture generated by FBO
 */


public class BloomManager {
    private static final String TAG = "RTTRenderer";

    private GameRender gameRender;

    public static final float LOGO_SCALE_Y = 0.16f;
    public float logoTranslateX;
    public float logoTranslateY = -0.5f;

    public volatile float strength = 0f;
    public volatile float strengthTemp = 0f;
    public static final float MAX_STRENGTH = 0.5f;


    FBORenderer fbor;
    int iProgId;
    int iPosition;
    int iTexCoords;
    int iTexLoc;
    int iTexLoc1;
    int iMVPMat;

    int iTexRTT;

    int fboId;

    FloatBuffer vertexBuffer;
    FloatBuffer texBuffer;


    public BloomManager(GameRender gameRender) {
        this.gameRender = gameRender;

        fbor = new FBORenderer(gameRender);

        vertexBuffer = GLUtils.CreateVertexArray(GLUtils.pos);
        texBuffer = GLUtils.CreateVertexArray(GLUtils.coord);

    }

    //    @Override
//    public void onDrawFrame(GL10 arg0) {
    public void drawLogo(float translateX, float translateY, float alpha, float scaleX, float scaleY, float bloomStrength) {
//        long c_Time = System.currentTimeMillis();
//        Log.d(TAG, "drawLogo");

        fbor.renderGaussianBlur(bloomStrength);

//        setProjection(GLConstants.getScreenWidth(), GLConstants.getScreenHeight());
        gameRender.setProjection();

        GLES20.glUseProgram(iProgId);
        GLES20.glEnable(GLES20.GL_BLEND);
        GLES20.glBlendFunc(GLES20.GL_ONE, GLES20.GL_ONE_MINUS_SRC_ALPHA);
        GLES20.glBlendEquation(GLES20.GL_FUNC_ADD);

//        vertexBuffer.position(0);
        GLES20.glEnableVertexAttribArray(iPosition);
        GLES20.glVertexAttribPointer(iPosition, 2, GLES20.GL_FLOAT, false, 0, vertexBuffer);

//        texBuffer.position(0);
        GLES20.glEnableVertexAttribArray(iTexCoords);
        GLES20.glVertexAttribPointer(iTexCoords, 2, GLES20.GL_FLOAT, false, 0, texBuffer);

        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, fboId);
//        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, fbor.iTexId1);
        GLES20.glUniform1i(iTexLoc, 0);

        GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, iTexRTT);
        GLES20.glUniform1i(iTexLoc1, 1);


//        Matrix.setIdentityM(m_fModel, 0);
        float[] matrix = gameRender.getMatrixFromIndex();
        gameRender.pushMatrix(matrix);
//        Matrix.rotateM(matrix,0,180,0,0,0);
//        Matrix.rotateM(matrix, 0, -180, 0, 0, 1);
        Matrix.translateM(matrix, 0, translateX, translateY, 0f);

        Matrix.scaleM(matrix, 0, scaleX, scaleY, 1f);
//        Matrix.rotateM(matrix, 0, -180, 1, 0, 0);
        GLES20.glUniformMatrix4fv(iMVPMat, 1, false, gameRender.getFinalMatrix(matrix), 0);
        gameRender.popMatrix();


//		GLES20.glDrawElements(GLES20.GL_TRIANGLES, cube.m_nIndeces, GLES20.GL_UNSIGNED_SHORT, indexBuffer);
        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
        GLES20.glDisableVertexAttribArray(iPosition);
        GLES20.glDisableVertexAttribArray(iTexCoords);
        GLES20.glDisable(GLES20.GL_BLEND);
//        Log.d("Gaussian Blur", "Time for Draw" + (System.currentTimeMillis() - c_Time) / 1000f);

    }

    public void init() {
        iTexRTT = -1;
        int[] ret = fbor.createFrameBuffers();
        fboId = ret[0];
        iTexRTT = ret[1];

        String strVShader =
                "attribute vec4 a_position;" +
                        "attribute vec2 a_texCoords;" +
                        "uniform mat4 u_mvpMatrix;" +
                        "varying vec2 v_texCoords;" +
                        "void main()" +
                        "{" +
                        "gl_Position = u_mvpMatrix * a_position;" +
                        "v_texCoords = a_texCoords;" +
                        "}";

        String strFShader =
                "precision mediump float;" +
                        "varying vec2 v_texCoords;" +
                        "uniform sampler2D u_texId;" +
                        "uniform sampler2D u_texId1;" +
//				"uniform sampler2D u_texId2;" +
                        "void main()" +
                        "{" +
                        "vec4 src = texture2D(u_texId, v_texCoords);" +
                        "vec4 dst = texture2D(u_texId1, v_texCoords);" +
                        "vec4 bloomcolor = clamp((src + dst) - (src * dst), 0.0, 1.0);" +
                        "gl_FragColor = bloomcolor;" +
//                        "gl_FragColor = dst;" +

//					"gl_FragColor = bloomcolor + texture2D(u_texId2, v_texCoords);" +
//					"gl_FragColor = texture2D(u_texId2, v_texCoords);" +
//                        "gl_FragColor.a = 1.0;" +
                        "}";

        iProgId = GLUtils.LoadProgram(strVShader, strFShader);
        iPosition = GLES20.glGetAttribLocation(iProgId, "a_position");
        iTexCoords = GLES20.glGetAttribLocation(iProgId, "a_texCoords");
        iTexLoc = GLES20.glGetUniformLocation(iProgId, "u_texId");
        iTexLoc1 = GLES20.glGetUniformLocation(iProgId, "u_texId1");
//		iTexLoc2 = GLES20.glGetUniformLocation(iProgId, "u_texId2");
        iMVPMat = GLES20.glGetUniformLocation(iProgId, "u_mvpMatrix");

        fbor.loadShaders();

        logoTranslateX = -GLConstants.getScreenWidth() / GLConstants.getScreenHeight() + 0.1f;

    }

}
